//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.db
{

public sealed partial class MapCfg :  Bright.Config.BeanBase 
{
    public MapCfg(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["mapName"].IsString) { throw new SerializationException(); }  MapName = _json["mapName"]; }
        { if(!_json["mapType"].IsNumber) { throw new SerializationException(); }  MapType = (MapType)_json["mapType"].AsInt; }
        { if(!_json["assetName"].IsString) { throw new SerializationException(); }  AssetName = _json["assetName"]; }
        { if(!_json["CharacterPosX"].IsNumber) { throw new SerializationException(); }  CharacterPosX = _json["CharacterPosX"]; }
        { if(!_json["CharacterPosY"].IsNumber) { throw new SerializationException(); }  CharacterPosY = _json["CharacterPosY"]; }
        { if(!_json["cameraMinHeight"].IsNumber) { throw new SerializationException(); }  CameraMinHeight = _json["cameraMinHeight"]; }
        { if(!_json["cameraMaxHeight"].IsNumber) { throw new SerializationException(); }  CameraMaxHeight = _json["cameraMaxHeight"]; }
        { if(!_json["cameraMinWidth"].IsNumber) { throw new SerializationException(); }  CameraMinWidth = _json["cameraMinWidth"]; }
        { if(!_json["cameraMaxWidth"].IsNumber) { throw new SerializationException(); }  CameraMaxWidth = _json["cameraMaxWidth"]; }
        { if(!_json["bgMusic"].IsString) { throw new SerializationException(); }  BgMusic = _json["bgMusic"]; }
        { var _json1 = _json["Portals"]; if(!_json1.IsArray) { throw new SerializationException(); } Portals = new System.Collections.Generic.List<db.Portal>(_json1.Count); foreach(JSONNode __e in _json1.Children) { db.Portal __v;  { if(!__e.IsObject) { throw new SerializationException(); }  __v = db.Portal.DeserializePortal(__e); }  Portals.Add(__v); }   }
        PostInit();
    }

    public MapCfg(int id, string mapName, MapType mapType, string assetName, float CharacterPosX, float CharacterPosY, float cameraMinHeight, float cameraMaxHeight, float cameraMinWidth, float cameraMaxWidth, string bgMusic, System.Collections.Generic.List<db.Portal> Portals ) 
    {
        this.Id = id;
        this.MapName = mapName;
        this.MapType = mapType;
        this.AssetName = assetName;
        this.CharacterPosX = CharacterPosX;
        this.CharacterPosY = CharacterPosY;
        this.CameraMinHeight = cameraMinHeight;
        this.CameraMaxHeight = cameraMaxHeight;
        this.CameraMinWidth = cameraMinWidth;
        this.CameraMaxWidth = cameraMaxWidth;
        this.BgMusic = bgMusic;
        this.Portals = Portals;
        PostInit();
    }

    public static MapCfg DeserializeMapCfg(JSONNode _json)
    {
        return new db.MapCfg(_json);
    }

    /// <summary>
    /// 地图id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 地图名称
    /// </summary>
    public string MapName { get; private set; }
    /// <summary>
    /// 地图类型
    /// </summary>
    public MapType MapType { get; private set; }
    /// <summary>
    /// 资源名
    /// </summary>
    public string AssetName { get; private set; }
    /// <summary>
    /// 角色初始位置X
    /// </summary>
    public float CharacterPosX { get; private set; }
    /// <summary>
    /// 角色初始位置Y
    /// </summary>
    public float CharacterPosY { get; private set; }
    /// <summary>
    /// 相机最小限制Y
    /// </summary>
    public float CameraMinHeight { get; private set; }
    /// <summary>
    /// 相机最大限制Y
    /// </summary>
    public float CameraMaxHeight { get; private set; }
    /// <summary>
    /// 相机最小限制X
    /// </summary>
    public float CameraMinWidth { get; private set; }
    /// <summary>
    /// 相机最大限制X
    /// </summary>
    public float CameraMaxWidth { get; private set; }
    /// <summary>
    /// 背景音乐
    /// </summary>
    public string BgMusic { get; private set; }
    public System.Collections.Generic.List<db.Portal> Portals { get; private set; }

    public const int __ID__ = -1187172104;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in Portals) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Portals) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "MapName:" + MapName + ","
        + "MapType:" + MapType + ","
        + "AssetName:" + AssetName + ","
        + "CharacterPosX:" + CharacterPosX + ","
        + "CharacterPosY:" + CharacterPosY + ","
        + "CameraMinHeight:" + CameraMinHeight + ","
        + "CameraMaxHeight:" + CameraMaxHeight + ","
        + "CameraMinWidth:" + CameraMinWidth + ","
        + "CameraMaxWidth:" + CameraMaxWidth + ","
        + "BgMusic:" + BgMusic + ","
        + "Portals:" + Bright.Common.StringUtil.CollectionToString(Portals) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
